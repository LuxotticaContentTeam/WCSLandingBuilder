(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],2:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _utilities = _interopRequireDefault(require("./utilities"));
var controlsChoicesManager = {
  init: function init() {
    var swiperOptions = {
      slidesPerView: "auto",
      centeredSlides: true,
      spaceBetween: 32,
      loop: true,
      navigation: {
        nextEl: ".swiper-button-next",
        prevEl: ".swiper-button-prev"
      },
      breakpoints: {
        1024: {
          spaceBetween: 64
        }
      }
    };
    _utilities["default"].initializeSwiper(".controls-choices-slider", swiperOptions);

    // utilitiesManager.pauseVideoOnPrevNextSlide(".controls-choices-slider");
  }
};
var _default = controlsChoicesManager;
exports["default"] = _default;

},{"./utilities":9,"@babel/runtime/helpers/interopRequireDefault":1}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var downloadAppManager = {
  init: function init() {
    var userAgent = navigator.userAgent.toLowerCase();
    var isAndroid = userAgent.indexOf("android") > -1;
    var isiOS = /(iphone|ipad|ipod|ios)/i.test(userAgent);
    var downloadCTA = document.getElementById("downloadCTA");
    if (isAndroid) {
      downloadCTA.href = "https://play.google.com/store/apps/details?id=com.facebook.stella&hl=en_US";
    } else if (isiOS) {
      downloadCTA.href = "https://apps.apple.com/it/app/meta-view-for-smart-glasses/id1558240027";
    }
  }
};
var _default = downloadAppManager;
exports["default"] = _default;

},{}],4:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _utilities = _interopRequireDefault(require("./utilities"));
var featuresManager = {
  init: function init() {
    var swiperOptions = {
      slidesPerView: 1.25,
      pagination: {
        el: ".swiper-pagination"
      }
    };
    _utilities["default"].initializeSwiperOnMobile(".features-slider", swiperOptions);
  }
};
var _default = featuresManager;
exports["default"] = _default;

},{"./utilities":9,"@babel/runtime/helpers/interopRequireDefault":1}],5:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _utilities = _interopRequireDefault(require("./utilities"));
var fourVideosManager = {
  init: function init() {
    var swiperOptions = {
      slidesPerView: 1.2
    };
    _utilities["default"].initializeSwiperOnMobile(".four-video-slider", swiperOptions);
  }
};
var _default = fourVideosManager;
exports["default"] = _default;

},{"./utilities":9,"@babel/runtime/helpers/interopRequireDefault":1}],6:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _utilities = _interopRequireDefault(require("./utilities"));
var getSupportManager = {
  init: function init() {
    var swiperOptions = {
      slidesPerView: 1.25,
      pagination: {
        el: ".swiper-pagination"
      }
    };
    _utilities["default"].initializeSwiperOnMobile(".get-support-slider", swiperOptions);
  }
};
var _default = getSupportManager;
exports["default"] = _default;

},{"./utilities":9,"@babel/runtime/helpers/interopRequireDefault":1}],7:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _utilities = _interopRequireDefault(require("./utilities"));
var _fourVideos = _interopRequireDefault(require("./fourVideos"));
var _getSupport = _interopRequireDefault(require("./getSupport"));
var _features = _interopRequireDefault(require("./features"));
var _controlsChoices = _interopRequireDefault(require("./controlsChoices"));
var _products = _interopRequireDefault(require("./products"));
var _downloadApp = _interopRequireDefault(require("./downloadApp"));
// import Swiper JS
// import Swiper from "swiper/swiper-bundle.min.js";

//class that handler generic scripts of LP
var mainManager = {
  setTextOnStickyBanner: function setTextOnStickyBanner() {
    window.addEventListener("scroll", function () {
      var sections = document.querySelectorAll("section");
      var productSection = document.getElementById("products");
      var productSectionTop = productSection.offsetTop;
      var stickyBannerEl = document.getElementById("stickyBanner");
      var stickyBannerText = stickyBannerEl.querySelector("#stickyBannerText");
      var currentSection = null;
      sections.forEach(function (section) {
        var sectionTop = section.offsetTop;
        var sectionBottom = sectionTop + section.clientHeight;
        if (window.scrollY >= sectionTop && window.scrollY < sectionBottom) {
          currentSection = section;
        }
      });
      if (currentSection) {
        var attribute = currentSection.querySelector("[data-title]");
        if (window.scrollY >= productSectionTop) {
          stickyBannerEl.classList.remove("cb_d-none");
        } else {
          stickyBannerEl.classList.add("cb_d-none");
        }
        if (attribute) {
          var attributeValue = attribute.getAttribute("data-title");
          stickyBannerText.textContent = attributeValue;
        }
      }
    });
  },
  init: function init() {
    var thisClass = this;
    thisClass.setTextOnStickyBanner();
    _utilities["default"].playPauseVideoWithControls();
    _utilities["default"].volumeOnOffVideo();
    _utilities["default"].manageAccordion();
    _fourVideos["default"].init();
    _getSupport["default"].init();
    _features["default"].init();
    _controlsChoices["default"].init();
    _products["default"].init();
    _downloadApp["default"].init();
  }
};
document.addEventListener("DOMContentLoaded", function () {
  mainManager.init();
  document.querySelector("#hero .video-control.play-pause").click();
});

},{"./controlsChoices":2,"./downloadApp":3,"./features":4,"./fourVideos":5,"./getSupport":6,"./products":8,"./utilities":9,"@babel/runtime/helpers/interopRequireDefault":1}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var productsManager = {
  init: function init() {
    function ct_loadSelectedViewAllURLMidProducts() {
      /* Get URL from selected category */
      var ct_mainURL = document.querySelector(".ct_midProducts_carousel .ct_category.ct_selected").getAttribute("ct_category_URL");
      var ct_mainDataElementID = "X_" + document.querySelector(".ct_midProducts_carousel .ct_category.ct_selected").getAttribute("ct_category") + "_Carousel";

      /* Update all View all URL's */
      var viewAllLinks = document.querySelectorAll(".ct_midProducts_carousel .ct_carousel_view_all");
      viewAllLinks.forEach(function (link) {
        link.setAttribute("href", ct_mainURL);
        link.setAttribute("data-element-id", ct_mainDataElementID);
      });
    }
    function ct_category_swapMidProducts() {
      /* Updates the style of selected category */
      $(".ct_midProducts_carousel .ct_category").removeClass("ct_selected");
      $(this).addClass("ct_selected");

      /* Hides old carousel tiles */
      $(".ct_midProducts_carousel .swiper-slide").remove();

      /* Get searchTerm from clicked category and populate the carousel */
      var ct_selected_category = $(this).attr("ct_category");
      ct_populate_category_carouselMidProducts(ct_selected_category);

      /* Get products value from local storage */
      // const storedValue = localStorage.getItem(ct_selected_category);
      // if (this.classList.contains("ct_clicked")) {
      //   const retrievedObject = JSON.parse(storedValue);
      //   console.log(retrievedObject);
      // } else {
      //   ct_populate_category_carouselMidProducts(ct_selected_category);
      // }
      // this.classList.add("ct_clicked");

      /* Get URL and data-element-id from clicked category and update view all data */
      var ct_viewAllURL = $(this).attr("ct_category_URL");
      var ct_viewAllDataElementID = "X_" + $(this).attr("ct_category") + "_Carousel";
      $(".ct_midProducts_carousel .ct_carousel_view_all").each(function () {
        $(this).attr("href", ct_viewAllURL);
        $(this).attr("data-element-id", ct_viewAllDataElementID);
      });
    }
    function ct_category_carouselMidProducts() {
      /* Creates the carousel */
      var ct_categoryCarouselMidProducts = new Swiper(".ct_midProducts_carousel .ct_category_carousel", {
        slidesPerView: "1.5",
        centeredSlides: true,
        spaceBetween: 16,
        initialSlide: 4,
        pagination: {
          el: ".swiper-pagination"
        },
        breakpoints: {
          1024: {
            slidesPerView: "3.5",
            navigation: {
              nextEl: ".swiper-button-next",
              prevEl: ".swiper-button-prev"
            }
          }
        }
      });
    }
    function ct_checkDiscountMidProducts() {
      /* Check if Product is on discount, if not hides the discount percentage and full price */
      var ct_discountElements = document.querySelectorAll(".ct_discount");
      ct_discountElements.forEach(function (discountElement) {
        if (discountElement.textContent === "NaN% Off") {
          discountElement.style.display = "none";
          var ct_listPriceElement = discountElement.parentNode.querySelector(".ct_list_price");
          if (ct_listPriceElement) {
            ct_listPriceElement.style.display = "none";
          }
        }
      });
    }

    /* Both functions manage the image on mouse enter and mouse leave */
    function ct_hoverProductMidProducts() {
      var ct_imgPath = this.querySelector("img").getAttribute("src");
      var ct_updatedImgPath = ct_imgPath.replace("shad__fr", "shad__qt");
      this.querySelector("img").setAttribute("src", ct_updatedImgPath);
    }
    function ct_unHoverProductMidProducts() {
      var ct_imgPath = this.querySelector("img").getAttribute("src");
      var ct_updatedImgPath = ct_imgPath.replace("shad__qt", "shad__fr");
      this.querySelector("img").setAttribute("src", ct_updatedImgPath);
    }
    function ct_populate_category_carouselMidProducts(ct_searchTermMidProducts, ct_dataElementID) {
      /* Set the data-element-id of carousel tiles */
      var ct_dataElementID = "X_ProductCarousel_LP";
      var productsJsonUrl = "../data/".concat(ct_searchTermMidProducts, ".json");
      var variantJsonUrl = "../data/".concat(ct_searchTermMidProducts, "Variants.json");

      /* Funzione per eseguire il fetch di un JSON */
      function fetchJSON(url) {
        return fetch(url).then(function (response) {
          return response.json();
        })["catch"](function (error) {
          console.error("Errore nel caricamento JSON:", error);
        });
      }
      fetchJSON(productsJsonUrl).then(function (productsJson) {
        fetchJSON(variantJsonUrl).then(function (variantsJson) {
          var products = productsJson.products.products.product;

          /* Push categorized data to local storage */
          // if (ct_searchTermMidProducts == "Categoria1") {
          //   localStorage.setItem("Categoria1", JSON.stringify(products));
          // }
          // if (ct_searchTermMidProducts == "Categoria2") {
          //   localStorage.setItem("Categoria2", JSON.stringify(products));
          // }

          for (var i = products.length - 1; i >= 0; i--) {
            /* Aggiungi le varianti a ciascun prodotto */
            var variantsKey = "variants" + i; // L'indice di posizionamento parte da 0
            var variants = variantsJson[variantsKey] || [];
            products[i].variants = variants;
            var ct_cc_url = products[i].pdpURL;
            var ct_cc_upc = products[i].upc;
            var ct_cc_brand = products[i].brand;
            var ct_cc_productName = products[i].productName.substring(1).split("_")[0];
            var ct_cc_listPrice = products[i].listPrice.replace("$ 0", "");
            var ct_cc_price = products[i].price;
            var ct_cc_discountPercentage = Math.floor((100 - parseInt(ct_cc_price.replace("$ ", "")) / parseInt(ct_cc_listPrice.replace("$ ", "")) * 100) / 5 * 5);
            var ct_categoryCarousel = document.querySelector(".ct_midProducts_carousel .ct_category_carousel .swiper-wrapper");
            var ct_slide = document.createElement("a");
            ct_slide.classList.add("swiper-slide", "ct_slide", "ct_productImage");
            ct_slide.href = ct_cc_url;
            ct_slide.setAttribute("data-element-id", ct_dataElementID);
            ct_slide.setAttribute("data-description", ct_cc_upc);
            ct_slide.setAttribute("aria-label", "Shop " + ct_cc_productName);
            var ct_box = document.createElement("div");
            ct_box.classList.add("ct_box");
            var ct_img = document.createElement("img");
            ct_img.src = "https://assets.lenscrafters.com/is/image/LensCrafters/" + ct_cc_upc + "__STD__shad__fr.png?imwidth=1024";
            ct_img.alt = "";
            ct_box.appendChild(ct_img);
            ct_slide.appendChild(ct_box);
            var ct_description = document.createElement("div");
            ct_description.classList.add("ct_description");
            var ct_brand = document.createElement("p");
            ct_brand.classList.add("ct_brand");
            ct_brand.textContent = ct_cc_brand;
            ct_description.appendChild(ct_brand);
            var ct_name = document.createElement("p");
            ct_name.classList.add("ct_name");
            ct_name.textContent = ct_cc_productName;
            ct_description.appendChild(ct_name);
            var ct_variant_name = document.createElement("p");
            ct_variant_name.classList.add("ct_variant_name");

            // Iteriamo sulle varianti del prodotto
            products[i].variants.forEach(function (variant) {
              if (variant) {
                ct_description.appendChild(ct_variant_name);
                ct_variant_name.textContent = variant.variantColor;
              }
            });
            var ct_priceMobHide = document.createElement("div");
            ct_priceMobHide.classList.add("ct_price", "ct_price_mob_hide");
            var ct_fromMob = document.createElement("p");
            ct_fromMob.classList.add("ct_from");
            ct_fromMob.textContent = "From";
            var ct_listPrice = document.createElement("p");
            ct_listPrice.classList.add("ct_list_price");
            ct_listPrice.textContent = "€" + ct_cc_listPrice;
            var ct_discountedPrice = document.createElement("p");
            ct_discountedPrice.classList.add("ct_discounted_price");
            ct_discountedPrice.textContent = "€" + ct_cc_price;
            var ct_discount = document.createElement("p");
            ct_discount.classList.add("ct_discount");
            ct_discount.textContent = ct_cc_discountPercentage + "% Off";
            ct_priceMobHide.appendChild(ct_fromMob);
            ct_priceMobHide.appendChild(ct_listPrice);
            ct_priceMobHide.appendChild(ct_discountedPrice);
            ct_priceMobHide.appendChild(ct_discount);
            ct_description.appendChild(ct_priceMobHide);
            var ct_priceDeskHide = document.createElement("div");
            ct_priceDeskHide.classList.add("ct_price", "cb_d-lg-none");
            var ct_fromDesk = document.createElement("p");
            ct_fromDesk.classList.add("ct_from");
            ct_fromDesk.textContent = "Frame only";
            var ct_discountedPriceDesk = document.createElement("p");
            ct_discountedPriceDesk.classList.add("ct_discounted_price");
            ct_discountedPriceDesk.textContent = "€" + ct_cc_price;
            ct_priceDeskHide.appendChild(ct_fromDesk);
            ct_priceDeskHide.appendChild(ct_discountedPriceDesk);
            ct_description.appendChild(ct_priceDeskHide);
            ct_slide.appendChild(ct_description);
            ct_categoryCarousel.prepend(ct_slide);
          }
          ct_checkDiscountMidProducts();
          ct_category_carouselMidProducts();
        });
      });
    }
    function ct_init() {
      /* Compiles View All URL on load */
      ct_loadSelectedViewAllURLMidProducts();

      /* Manage the swap between categories */
      var ct_categoriesMidProducts = document.querySelectorAll(".ct_midProducts_carousel .ct_category");
      ct_categoriesMidProducts.forEach(function (categoryMidproducts) {
        categoryMidproducts.addEventListener("click", ct_category_swapMidProducts);
      });

      /* Hover products animation */
      $(document).on("mouseenter", ".ct_category_carousel_module .ct_slide .ct_box", ct_hoverProductMidProducts);
      $(document).on("mouseleave", ".ct_category_carousel_module .ct_slide .ct_box", ct_unHoverProductMidProducts);

      /* Populate products and create carousel */
      var ct_searchTermMidProducts = "Categoria1";
      ct_populate_category_carouselMidProducts(ct_searchTermMidProducts);
      var ct_categoriesMidProducts = document.querySelectorAll(".ct_midProducts_carousel .ct_category");
    }
    ct_init();
  }
};
var _default = productsManager;
exports["default"] = _default;

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
//class that handler utilitis that can be reused everywhere
var utilitiesManager = {
  setVideoUrl: function setVideoUrl(currentVideoEl) {
    var mediaQuery = window.matchMedia("(max-width: 768px)");
    var videoMob = currentVideoEl.getAttribute("data-video-mob");
    var videoDesk = currentVideoEl.getAttribute("data-video-desk");
    var videoSource;
    if (mediaQuery.matches) {
      videoSource = "<source src=\"".concat(videoMob, "\" type=\"video/mp4\">Your browser does not support the video tag.");
    } else {
      videoSource = "<source src=\"".concat(videoDesk, "\" type=\"video/mp4\">Your browser does not support the video tag.");
    }
    currentVideoEl.innerHTML = videoSource;
  },
  playPauseVideoWithControls: function playPauseVideoWithControls() {
    var thisClass = this;
    var playPauseControl = document.querySelectorAll(".video-control.play-pause");
    for (var i = 0; i < playPauseControl.length; i++) {
      playPauseControl[i].addEventListener("click", function (event) {
        event.preventDefault();
        var currentClosestContainer = this.closest("section>div");
        var currentVideoContainer = this.closest(".video-container");
        var currentVideoEl = currentVideoContainer.querySelector("video");
        var currentVideoCover = currentVideoContainer.querySelector(".video-cover");
        var nextElem = currentVideoContainer.nextElementSibling;
        var playIcon = this.querySelector(".play");
        var pauseIcon = this.querySelector(".pause");
        thisClass.setVideoUrl(currentVideoEl);
        currentVideoCover.classList.add("cb_d-none");
        currentVideoEl.classList.remove("cb_d-none");
        if (currentClosestContainer.classList.contains("is-banner")) {
          while (nextElem) {
            nextElem.classList.add("cb_d-none");
            nextElem = nextElem.nextElementSibling;
          }
        }
        playIcon.classList.toggle("cb_d-none");
        pauseIcon.classList.toggle("cb_d-none");
        if (!currentVideoEl.classList.contains("is-playing")) {
          document.querySelectorAll("video.is-playing").forEach(function (video) {
            video.classList.remove("is-playing");
            video.closest(".video-container").querySelector(".play").classList.remove("cb_d-none");
            video.closest(".video-container").querySelector(".pause").classList.add("cb_d-none");
            video.pause();
          });
          currentVideoEl.play();
          currentVideoEl.classList.add("is-playing");
        } else {
          currentVideoEl.pause();
          currentVideoEl.classList.remove("is-playing");
        }
      });
    }
  },
  volumeOnOffVideo: function volumeOnOffVideo() {
    var volumeOnOffControl = document.querySelectorAll(".video-control.volume-on-off");
    for (var i = 0; i < volumeOnOffControl.length; i++) {
      volumeOnOffControl[i].addEventListener("click", function (event) {
        event.preventDefault();
        var currentVideoContainer = this.closest(".video-container");
        var currentVideoEl = currentVideoContainer.querySelector("video");
        var volumeOnIcon = this.querySelector(".volume-on");
        var volumeOffIcon = this.querySelector(".volume-off");
        volumeOnIcon.classList.toggle("cb_d-none");
        volumeOffIcon.classList.toggle("cb_d-none");
        if (volumeOnIcon.classList.contains("cb_d-none")) {
          currentVideoEl.muted = true;
        } else {
          currentVideoEl.muted = false;
        }
      });
    }
  },
  manageAccordion: function manageAccordion() {
    var accordionButton = document.querySelectorAll(".accordion-button");
    for (var i = 0; i < accordionButton.length; i++) {
      accordionButton[i].addEventListener("click", function (event) {
        event.preventDefault();
        this.classList.toggle("active");
        var nextAccordionDetails = this.nextElementSibling;
        if (!nextAccordionDetails.classList.contains("opened")) {
          nextAccordionDetails.classList.add("opened");
          var nextAccordionDetailsHeight = nextAccordionDetails.children[0].offsetHeight;
          nextAccordionDetails.style.height = nextAccordionDetailsHeight + "px";
        } else {
          nextAccordionDetails.classList.remove("opened");
          nextAccordionDetails.style.height = 0;
        }
      });
    }
  },
  initializeSwiper: function initializeSwiper(sliderClass, options) {
    var currentSlider = new Swiper(sliderClass, options);
    return currentSlider;
  },
  initializeSwiperOnMobile: function initializeSwiperOnMobile(sliderClass, options) {
    var mediaQuery = window.matchMedia("(max-width: 767px)");
    var currentSlider;
    var initializeSwiper = function initializeSwiper() {
      if (mediaQuery.matches) {
        currentSlider = new Swiper(sliderClass, options);
      }
    };
    initializeSwiper();
    window.addEventListener("resize", function () {
      var swiperEl = document.querySelectorAll(sliderClass);
      for (var i = 0; i < swiperEl.length; i++) {
        if (!swiperEl[i].classList.contains("swiper-initialized")) {
          initializeSwiper();
        } else if (!mediaQuery.matches) {
          swiperEl[i].swiper.disable();
          swiperEl[i].swiper.destroy(true, true);
        }
      }
    });
    return currentSlider;
  },
  pauseVideoOnPrevNextSlide: function pauseVideoOnPrevNextSlide(sliderClass) {
    var currentSwiperEl = document.querySelector(sliderClass);
    currentSwiperEl.swiper.on("slideChange", function () {
      currentSwiperEl.querySelectorAll("video.is-playing").forEach(function (video) {
        video.classList.remove("is-playing");
        video.closest(".video-container").querySelector(".play").classList.remove("cb_d-none");
        video.closest(".video-container").querySelector(".pause").classList.add("cb_d-none");
        video.pause();
      });
    });
  }
};
var _default = utilitiesManager;
exports["default"] = _default;

},{}]},{},[7]);
