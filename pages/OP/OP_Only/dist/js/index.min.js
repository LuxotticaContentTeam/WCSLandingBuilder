(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _utils = require("./modules/utils");
console.clear();
(0, _utils.customLog)('All working');

},{"./modules/utils":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTrad = exports.eventDispatch = exports.eventCatcher = exports.customLog = void 0;
/**
 * Custom log
 * @param {String} log - Main message
 * @param {String} style - Add extra style
 * @param {String} type - "err" for error log, "wait" for wait log
*/
var customLog = function customLog(log, style) {
  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  // if (window.ct_SUPERNOVA.env === 'development' || localStorage.getItem("dev") == "true"){
  if (type == "err") {
    console.log('%c ' + '[OP]  ' + log, "background: red;padding:2px 6px; border-radius:8px; color:#fff;font-family:sans-serif;font-size:14px; ".concat(style, ";"));
  }
  if (type == "wait") {
    console.log('%c ' + '[OP]  ' + log, "background: #ceb000;padding:2px 4px; border-radius:4px; color:#000;font-family:sans-serif;font-size:14px; ".concat(style, ";"));
  }
  if (type == '') {
    console.log('%c ' + '[OP]  ' + log, "background: #202125;padding:4px 8px; border-radius:6px; color:#fff;font-family:sans-serif;font-size:14px; ".concat(style, ";"));
  }
  // }
};

/**
 * Custom log
 * @param {String} field - key of the copy in the json
 * @param {String} country - es: en-us, es-es
 * @param {String} lang - es: en, fr, it
*/
exports.customLog = customLog;
var getTrad = function getTrad(field, country, lang) {
  if (typeof field === 'string') return field;
  var keys = Object.keys(field);
  if (keys.includes(country)) return field[country];
  if (keys.includes(lang)) return field[lang];
  if (keys.includes('en-us')) return field['en-us'];
  if (keys.includes('en')) return field['en'];
  return field[0];
};

/**
 * 
 * @param {String} name - Event Name
 * @param {Function} cb - CallBack
 * @returns Run Callback
 */
exports.getTrad = getTrad;
var eventCatcher = function eventCatcher(name, cb) {
  return [window.addEventListener(name, function (e) {
    cb(e.detail);
  })];
};
exports.eventCatcher = eventCatcher;
var eventDispatch = function eventDispatch(event) {
  var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var eventToDispatch = new CustomEvent(event, {
    detail: detail
  });
  window.dispatchEvent(eventToDispatch);
};
exports.eventDispatch = eventDispatch;

},{}]},{},[1]);
