(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],2:[function(require,module,exports){
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],3:[function(require,module,exports){
var arrayLikeToArray = require("./arrayLikeToArray.js");
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}
module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./arrayLikeToArray.js":1}],4:[function(require,module,exports){
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],5:[function(require,module,exports){
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],6:[function(require,module,exports){
function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],7:[function(require,module,exports){
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],8:[function(require,module,exports){
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],9:[function(require,module,exports){
var arrayWithHoles = require("./arrayWithHoles.js");
var iterableToArrayLimit = require("./iterableToArrayLimit.js");
var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");
var nonIterableRest = require("./nonIterableRest.js");
function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}
module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./arrayWithHoles.js":2,"./iterableToArrayLimit.js":6,"./nonIterableRest.js":7,"./unsupportedIterableToArray.js":11}],10:[function(require,module,exports){
var arrayWithoutHoles = require("./arrayWithoutHoles.js");
var iterableToArray = require("./iterableToArray.js");
var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");
var nonIterableSpread = require("./nonIterableSpread.js");
function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}
module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./arrayWithoutHoles.js":3,"./iterableToArray.js":5,"./nonIterableSpread.js":8,"./unsupportedIterableToArray.js":11}],11:[function(require,module,exports){
var arrayLikeToArray = require("./arrayLikeToArray.js");
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}
module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./arrayLikeToArray.js":1}],12:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _lazy = require("./lazy");
var _nav = require("./nav");
var _video = require("./video");
function currentDevice() {
  return window.innerWidth > 1025 ? "D" : window.innerWidth < 1025 && window.innerWidth >= 768 ? "T" : window.innerWidth < 768 ? "M" : "not recognized";
}
function entryHero() {}
function entryAnim() {
  for (var _i = 0, _Object$entries = Object.entries(_nav.navManger.sectionsTopOffest); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = (0, _slicedToArray2["default"])(_Object$entries[_i], 2),
      key = _Object$entries$_i[0],
      value = _Object$entries$_i[1];
    if (window.scrollY + Math.floor(window.innerHeight / 100 * 80) - value.top > 0 && !document.querySelector("[data-section=\"".concat(key, "\"]")).classList.contains('ct_in')) {
      document.querySelector("[data-section=\"".concat(key, "\"]")).classList.add('ct_in');
    }
  }
}
document.addEventListener('DOMContentLoaded', function () {
  window.ct_current__device = currentDevice();
  window.promo = false;
  window.navManger = _nav.navManger;
  entryHero();
  (0, _lazy.lazyLo)();
  _video.videoManager.init();
  _nav.navManger.init();
  entryAnim();
});
document.addEventListener('scroll', function () {
  (0, _lazy.lazyLo)();
  entryAnim();
});
$(document).ready(function () {
  var _$$;
  $('.slider-text').slick({
    slidesToShow: 1,
    slidesToScroll: 1,
    arrows: true,
    fade: true,
    asNavFor: '.slider-images',
    speed: 600,
    dots: true,
    rows: 0,
    autoplay: true,
    prevArrow: '<button type="button" class="slick-prev"><svg width="13" height="12" viewBox="0 0 13 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.64672 11.8535L2.79297 5.99998L8.64672 0.146484L9.35372 0.853484L4.20747 5.99998L9.35372 11.1465L8.64672 11.8535Z" fill="#555555"/> </svg>  </button>',
    nextArrow: '<button type="button" class="slick-next"><svg width="13" height="12" viewBox="0 0 13 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4.35348 11.8535L3.64648 11.1465L8.79273 5.99998L3.64648 0.853484L4.35348 0.146484L10.2072 5.99998L4.35348 11.8535Z" fill="#555555"/></svg> </button>'
  });
  $('.slider-images').slick({
    slidesToShow: 1,
    slidesToScroll: 1,
    asNavFor: '.slider-text',
    dots: false,
    arrows: false,
    centerMode: true,
    infinite: true,
    easing: 'ease',
    speed: 600,
    centerPadding: '28%',
    rows: 0,
    responsive: [{
      breakpoint: 1024,
      settings: {
        slidesToShow: 1,
        slidesToScroll: 1,
        centerMode: true,
        arrows: false,
        draggable: true,
        centerPadding: '22%'
      }
    }]
  });

  // Add custom class to next or previous slide depending on change direction
  $('.slider-images').on('beforeChange', function (event, slick, currentSlide, nextSlide) {
    var nextIndex = currentSlide + 1; // assume moving right
    if (currentSlide - 1 == nextSlide || nextSlide + 1 == slick.slideCount && currentSlide < nextSlide) {
      nextIndex = currentSlide - 1; // nope, moving left
    }

    $("[data-slick-index=\"".concat(nextIndex, "\"]")).addClass('slick-target');
  });

  // clear custom class after transition
  $('.slider-images').on('afterChange', function () {
    $('.slick-slide').removeClass('slick-target');
  });
  $('.slider-text .slick-dots').append("<li class=\"ct_slide_count\"><button> / ".concat((_$$ = $('.slider-text .slick-dots')[0]) === null || _$$ === void 0 ? void 0 : _$$.childElementCount, "</button></li>"));
  var sliderPlayPause = document.querySelector('.ct_slider__controls');
  sliderPlayPause.addEventListener('click', function () {
    if (sliderPlayPause.classList.contains('ct__playing')) {
      sliderPlayPause.classList.remove('ct__playing');
      $('.slider-text').slick('slickSetOption', 'autoplay', false).slick('slickPause');
    } else {
      sliderPlayPause.classList.add('ct__playing');
      $('.slider-text').slick('slickSetOption', 'autoplay', true).slick('slickPlay');
    }
  });
});
// $('#slider').slick({
//     infinite: true,
//     slidesToShow: 1,
//     arrows:false,
//     accessibility:false,
//     rows:0,
//     responsive: [
//         {
//             breakpoint: 1025,
//             settings: {
//                 infinite: true,
//                 slidesToShow: 2,
//                 arrows:false,
//                 dots: false,
//                 rows:0,
//                 accessibility:false
//             }
//         }
//     ]
// })

},{"./lazy":13,"./nav":14,"./video":15,"@babel/runtime/helpers/interopRequireDefault":4,"@babel/runtime/helpers/slicedToArray":9}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lazyLo = void 0;
var lazyLo = function lazyLo() {
  var windowTop = $(window).scrollTop();
  $('.ct_space .lazy-lo:not(.lazy-loaded)').each(function () {
    if (windowTop > $(this).offset().top - window.innerHeight * 2) {
      if ($(this).is('video')) {
        if ($(this).attr('data-video-src-tab') == undefined) {
          if (window.ct_current__device !== "D") {
            if ($(this).attr('data-video-src-mob') != undefined) {
              $(this).addClass('ct_m__video');
              $(this).attr('poster', $(this).attr('data-poster-mob'));
              $(this).attr('src', $(this).attr('data-video-src-mob'));
            } else {
              $(this).addClass('ct_d__video');
              $(this).attr('poster', $(this).attr('data-poster-desk'));
              $(this).attr('src', $(this).attr('data-video-src-desk'));
            }
          } else {
            if (window.document.documentMode && $(this).attr('data-poster-desk-ie') != undefined && $(this).attr('data-poster-desk-ie').length > 0) {
              //set poster for IE
              $(this).addClass('ct_ie__video');
              $(this).attr('poster', $(this).attr('data-poster-desk-ie'));
            } else {
              $(this).addClass('ct_d__video');
              $(this).attr('poster', $(this).attr('data-poster-desk'));
              $(this).attr('src', $(this).attr('data-video-src-desk'));
            }
          }
        } else {
          if (ct_get__device_type() === 'mob') {
            //mobile
            if ($(this).attr('data-video-src-mob') != undefined) {
              $(this).addClass('ct_m__video');
              $(this).attr('poster', $(this).attr('data-poster-mob'));
              $(this).attr('src', $(this).attr('data-video-src-mob'));
            } else {
              $(this).addClass('ct_d__video');
              $(this).attr('poster', $(this).attr('data-poster-desk'));
              $(this).attr('src', $(this).attr('data-video-src-desk'));
            }
          } else {
            if (ct_get__device_type() === 'tab') {
              //tablet
              $(this).addClass('ct_t__video');
              $(this).attr('poster', $(this).attr('data-poster-tab'));
              $(this).attr('src', $(this).attr('data-video-src-tab'));
            } else {
              //desktop
              if (window.document.documentMode && $(this).attr('data-poster-desk-ie') != undefined && $(this).attr('data-poster-desk-ie').length > 0) {
                //set poster for IE
                $(this).addClass('ct_ie__video');
                $(this).attr('poster', $(this).attr('data-poster-desk-ie'));
              } else {
                $(this).addClass('ct_d__video');
                $(this).attr('poster', $(this).attr('data-poster-desk'));
                $(this).attr('src', $(this).attr('data-video-src-desk'));
              }
            }
          }
        }
      } else if ($(this).is('picture')) {
        $(this).find('source').each(function () {
          $(this).attr('srcset', $(this).attr('data-image-src'));
        });
        $('img', this).attr({
          'src': $('img', this).attr('data-image-src'),
          'srcset': $('img', this).attr('data-image-srcset')
        });
      }
      if ($(this).is('img')) {
        $(this).attr('src', $(this).attr('data-image-src'));
      }
      $(this).addClass('lazy-loaded');
    }
  });
};
exports.lazyLo = lazyLo;

},{}],14:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.navManger = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var navManger = {
  nav: document.querySelector('.ct_nav__stick_container .ct_nav__stick_wrap'),
  nav_container: document.querySelector('.ct_nav__stick_container'),
  menu_offset: 0,
  nav_offset: 0,
  sectionsTopOffest: {},
  benefitBarHeight: 0,
  manual_click: {
    active: false,
    section: ''
  },
  inSection: false,
  init: function init() {
    var _this = this;
    if (document.querySelector('.benefit-bar')) {
      this.benefitBarHeight = document.querySelector('.benefit-bar').clientHeight;
    } else {
      setTimeout(function () {
        if (document.querySelector('.benefit-bar')) {
          _this.benefitBarHeight = document.querySelector('.benefit-bar').clientHeight;
          _this.setMenuOffset();
        }
      }, 2000);
    }
    this.setOffsets();
    this.setStickyNav();
    this.setClickHandler();
    this.setActiveSection();
    this.onScrollEvents();
  },
  setOffsets: function setOffsets() {
    var _this2 = this;
    this.setMenuOffset();
    (0, _toConsumableArray2["default"])(document.querySelectorAll('.ct_space [data-section]')).forEach(function (elem) {
      _this2.sectionsTopOffest[elem.dataset.section] = {
        "top": elem.offsetTop
      };
    });
    this.sectionsTopOffestKeys = Object.keys(this.sectionsTopOffest);
  },
  setMenuOffset: function setMenuOffset(down) {
    try {
      if (ct_current__device !== 'D') {
        if (!down) {
          if (document.querySelector('.sgh-main-menu__wrapper').classList.contains('sgh-main-menu__down') || down) {
            this.menu_offset = document.querySelector('.sgh-header-top').clientHeight;
          } else {
            this.menu_offset = document.querySelectorAll('.sgh-main-menu')[1].clientHeight + document.querySelector('.sgh-header-top').clientHeight + this.benefitBarHeight;
          }
        } else {
          console.log(down);
          if (down === 'down') {
            this.menu_offset = document.querySelector('.sgh-header-top').clientHeight;
          }
          if (down === 'up') {
            this.menu_offset = document.querySelectorAll('.sgh-main-menu')[1].clientHeight + document.querySelector('.sgh-header-top').clientHeight + this.benefitBarHeight;
          }
        }
      } else {
        if (!down) {
          if (document.querySelector('.sgh-main-menu__wrapper').classList.contains('sgh-main-menu__down') || down) {
            this.menu_offset = document.querySelector('.sgh-header-top').clientHeight;
          } else {
            this.menu_offset = document.querySelector('.main-menu-center.navbar').clientHeight + document.querySelector('.sgh-header-top').clientHeight + this.benefitBarHeight;
          }
        } else {
          console.log(down);
          if (down === 'down') {
            this.menu_offset = document.querySelector('.sgh-header-top').clientHeight;
          }
          if (down === 'up') {
            this.menu_offset = document.querySelector('.main-menu-center.navbar').clientHeight + document.querySelector('.sgh-header-top').clientHeight + this.benefitBarHeight;
          }
        }
      }
    } catch (error) {
      console.log('Nav Erorr: ', error);
      this.menu_offset = 0;
    }
    this.nav_offset = this.menu_offset + this.nav.clientHeight;
  },
  setStickyNav: function setStickyNav() {
    if (window.scrollY + this.menu_offset >= this.nav_container.offsetTop) {
      if (!this.nav.classList.contains('ct_stick')) {
        this.nav.classList.add('ct_stick');
      }
      this.nav.style.top = this.menu_offset + 'px';
    } else {
      if (this.nav.classList.contains('ct_stick')) {
        this.nav.classList.remove('ct_stick');
        this.nav.style.top = 'unset';
      }
    }
  },
  setClickHandler: function setClickHandler() {
    var _this3 = this;
    (0, _toConsumableArray2["default"])(document.querySelectorAll('.ct_nav__container ul button')).forEach(function (elem) {
      elem.addEventListener('click', function () {
        ct_scroll_to_section(elem.dataset.sectionTo);
        if (document.querySelector('.ct_nav__container ul button.ct_active')) {
          document.querySelector('.ct_nav__container ul button.ct_active').classList.remove("ct_active");
        }
        _this3.manual_click.active = true;
        _this3.manual_click.section = elem.dataset.sectionTo;
        elem.classList.add('ct_active');
        if (ct_current__device !== 'D') {
          $('.ct_nav__stick_wrap ul').stop().animate({
            scrollLeft: $(elem).offset().left + $('.ct_nav__stick_wrap ul').scrollLeft() - 8
          }, 500, 'linear', function () {});
        }
      });
    });
  },
  setActiveSection: function setActiveSection() {
    navManger.inSection = false;
    navManger.sectionsTopOffestKeys.forEach(function (elem, i) {
      var _navManger$sectionsTo;
      if (window.scrollY + navManger.nav_offset >= navManger.sectionsTopOffest[elem].top && window.scrollY + navManger.nav_offset < ((_navManger$sectionsTo = navManger.sectionsTopOffest[navManger.sectionsTopOffestKeys[i + 1]]) === null || _navManger$sectionsTo === void 0 ? void 0 : _navManger$sectionsTo.top)) {
        navManger.inSection = true;
        if (navManger.nav.classList.contains('ct_hide')) {
          navManger.nav.classList.remove('ct_hide');
        }
        if (!document.querySelector("[data-section-to=\"".concat(elem, "\"]")).classList.contains('ct_active')) {
          if (document.querySelector('.ct_nav__container button.ct_active')) {
            document.querySelector('.ct_nav__container button.ct_active').classList.remove('ct_active');
          }
          document.querySelector("[data-section-to=\"".concat(elem, "\"]")).classList.add('ct_active');
          if (ct_current__device !== 'D') {
            $('.ct_nav__stick_wrap ul').stop().animate({
              scrollLeft: $("[data-section-to=\"".concat(elem, "\"]")).offset().left + $('.ct_nav__stick_wrap ul').scrollLeft() - 8
            }, 500, 'linear', function () {});
          }
        }
      }
    });
    if (!navManger.inSection && document.querySelector('.ct_nav__container button.ct_active')) {
      document.querySelector('.ct_nav__container button.ct_active').classList.remove('ct_active');
      if (window.scrollY >= navManger.sectionsTopOffest.last.top - navManger.nav_offset) {
        navManger.nav.classList.add('ct_hide');
      } else {
        navManger.nav.classList.remove('ct_hide');
      }
    }
  },
  onScrollEvents: function onScrollEvents() {
    var _this4 = this;
    document.addEventListener('scroll', function () {
      if (navManger.manual_click.active) {
        if (window.scrollY + navManger.nav_offset >= navManger.sectionsTopOffest[navManger.manual_click.section].top && window.scrollY + navManger.nav_offset < navManger.sectionsTopOffest[navManger.sectionsTopOffestKeys[navManger.sectionsTopOffestKeys.indexOf(navManger.manual_click.section) + 1]].top) {
          navManger.manual_click.active = false;
        }
      } else {
        _this4.setMenuOffset();
        navManger.setActiveSection();
      }
      _this4.setStickyNav();
    });
  }
};
exports.navManger = navManger;
function ct_scroll_to_section(elem) {
  var section = document.querySelector(".ct_double_content[data-section=\"".concat(elem, "\"]"));
  var sectionTop = section.getBoundingClientRect().top;
  if (section.offsetTop > window.scrollY) {
    navManger.setMenuOffset('down');
    window.scroll({
      behavior: 'smooth',
      left: 0,
      top: sectionTop + window.scrollY - navManger.nav_offset
    });
  } else {
    navManger.setMenuOffset('up');
    window.scroll({
      behavior: 'smooth',
      left: 0,
      top: sectionTop + window.scrollY - navManger.nav_offset
    });
  }
}

},{"@babel/runtime/helpers/interopRequireDefault":4,"@babel/runtime/helpers/toConsumableArray":10}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.videoManager = void 0;
var videoManager = {
  videos: [],
  init: function init() {
    this.videos = document.querySelectorAll('.ct_double_content .ct_video__container');
    this.set_video_control(this.videos);
  },
  set_video_control: function set_video_control(videos) {
    videos.forEach(function (video_container) {
      var video = video_container.querySelector('video');
      var controls = video_container.querySelector('.ct_video__controls');
      controls.addEventListener('click', function (e) {
        if (video.paused) {
          if (video.readyState < 3) {
            video.load();
          }
          if (video.readyState >= 3) {
            video.play();
          } else {
            var waitVideoLoaded = setTimeout(function () {
              // console.log('video waiting..')
              if (video.readyState < 3) {
                video.load();
              }
              if (video.readyState >= 3) {
                video.play();
                clearInterval(waitVideoLoaded);
              }
            }, 250);
          }
          video.addEventListener('play', function () {
            controls.classList.add('ct__playing');
            video.onended = function () {
              controls.classList.remove('ct__playing');
            };
          }, {
            once: true
          });
        } else {
          video.pause();
          controls.classList.remove('ct__playing');
        }
      });
    });
  }
};
exports.videoManager = videoManager;

},{}]},{},[12]);
