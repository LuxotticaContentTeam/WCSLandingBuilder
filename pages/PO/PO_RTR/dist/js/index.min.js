(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var Styles = {
  products: {},
  modelsN: 0,
  selector_positions: [],
  currentModel: '',
  currentUpc: '',
  defaultProd: '',
  updateQueue: [],
  init: function init() {
    this.container = document.querySelector('#styles');
    // this.setData();
    // this.build();
    // scrollManager.addEvent(document.querySelector('#styles'), this.scroll.bind(this),'');
    // this.setElements();
    // this.selectorHandler();
    window.Styles = Styles;
  },
  setData: function setData() {
    this.contents = window.ct_SUPERNOVA.translations.styles;
    this.products = this.contents.products;
    this.productsInfo = window.ct_SUPERNOVA.config.prod_info;
    this.defaultProd = this.contents["default"];
  },
  build: function build() {
    var _this = this;
    //HTML
    var selectorHtml = '';
    var variantsHtml = '';
    Object.keys(this.products).forEach(function (model) {
      selectorHtml += buildHtmlFromTemplate('model_selector__template', {
        model: model,
        upc: Object.keys(_this.products[model])[0]
      });
      variantsHtml += buildHtmlFromTemplate('variant_selector__template', {
        model: model
      });
    });
    this.container.querySelector('.model_selector ul').innerHTML = selectorHtml;
    this.container.querySelector('.variant_selector').innerHTML = variantsHtml;
    this.container.querySelector('.desc_container').innerHTML = buildHtmlFromTemplate('desc__template', this.contents.desc);
    this.container.querySelector('.tutorial > span').innerHTML = checkTrad(ct_SUPERNOVA.config.rtr.drag, ct_SUPERNOVA.lang);
    var prodHtml = '';
    Object.keys(this.products).forEach(function (model) {
      prodHtml = '';
      Object.keys(_this.products[model]).forEach(function (prod) {
        prodHtml += buildHtmlFromTemplate('variant_selector_btn__template', {
          model: model,
          prod: prod,
          color: _this.productsInfo[prod].swatch.length > 1 ? "linear-gradient(135deg, ".concat(_this.productsInfo[prod].swatch[0], " 0%, ").concat(_this.productsInfo[prod].swatch[1], " 100%);") : _this.productsInfo[prod].swatch[0]
        });
      });
      _this.container.querySelector(".variant_selector [data-model=\"".concat(model, "\"]")).innerHTML = prodHtml;
    });
    this.container.querySelector('.cta_container').innerHTML = buildHtmlFromTemplate('cta__template', {
      buyNow: ct_SUPERNOVA.translations.common.buyNow
    });
    this.container.querySelector('.prescription').innerHTML = this.contents.prescription ? this.contents.prescription : '';
    loadScript('https://rtr-viewer.luxottica.com/lib/v/5.0.0/main.js', function () {
      Rtr.init();
    });
  },
  setElements: function setElements() {
    this.updateProd(this.container.querySelector(".model_selector button[data-model=\"".concat(this.defaultProd.model, "\"]")));
    this.currentModel = this.defaultProd.model;
    this.currentUpc = this.defaultProd.upc;
  },
  scroll: function scroll() {
    if (ct_SUPERNOVA.device.isMobile) {
      // this.sectionAnchoring();
    }
    if (scrollManager.currentElements['styles'].progress > .1) {
      this.container.classList.add('active');
    } else {
      this.container.classList.remove('active');
    }
    if (scrollManager.currentElements['styles'].progress > .35 && !Rtr.firstPosition) {
      Rtr.inSection();
      Rtr.firstPosition = true;
    }
  },
  selectorHandler: function selectorHandler() {
    var _this2 = this;
    this.container.querySelectorAll('.model_selector button').forEach(function (btn) {
      btn.addEventListener('click', function () {
        _this2.updateProd(btn);
      });
    });
    this.container.querySelectorAll('.variant_selector button').forEach(function (btn) {
      btn.addEventListener('click', function () {
        _this2.updateProd(btn);
      });
    });
  },
  updateSelectorPos: function updateSelectorPos(btn) {
    var btnPos = btn.getClientRects()[0].x;
    var btnWidth = btn.clientWidth;
    var selectorPos = this.container.querySelector('.model_selector').getClientRects()[0].x;
    var deltaPost = btnPos - selectorPos;
    Styles.container.querySelector('.selection_pointer').style.transform = "translateX(".concat(deltaPost, "px)");
    Styles.container.querySelector('.selection_pointer').style.width = "".concat(btnWidth, "px");
  },
  updateProd: function updateProd(btn) {
    if (!Rtr.rendering) {
      if (this.currentModel != btn.dataset.model) {
        this.currentModel = btn.dataset.model;
        this.updateModel(btn);
      }
      if (this.currentUpc != btn.dataset.prod) {
        if (this.currentUpc != '') {
          this.updateAsset(btn.dataset.prod);
        }
        this.currentUpc = btn.dataset.prod;
        this.updateVariantList(btn.dataset.model, btn.dataset.prod);
        this.updateDetails(btn.dataset.model, btn.dataset.prod);
      }
    }
  },
  updateModel: function updateModel(btn) {
    if (this.container.querySelector('.model_selector button.active')) {
      this.container.querySelector('.model_selector button.active').classList.remove('active');
    }
    btn.classList.add('active');
    this.updateSelectorPos(btn);
  },
  updateAsset: function updateAsset(upc) {
    this.updateQueue.push(upc);
    this.container.querySelector('.loader .icon_container').classList.add('rotate');
    Rtr.update(upc);
  },
  updateVariantList: function updateVariantList(model, prod) {
    if (this.container.querySelector('.variant_selector ul.active')) {
      this.container.querySelector('.variant_selector ul.active').classList.remove('active');
    }
    this.container.querySelector(".variant_selector ul[data-model=\"".concat(model, "\"]")).classList.add('active');
    if (this.container.querySelector(".variant_selector ul[data-model=\"".concat(model, "\"] button.active"))) {
      this.container.querySelector(".variant_selector ul[data-model=\"".concat(model, "\"] button.active")).classList.remove('active');
      this.container.querySelector(".variant_selector ul[data-model=\"".concat(model, "\"] button[data-prod=\"").concat(prod, "\"]")).classList.add('active');
    } else {
      this.container.querySelector(".variant_selector ul[data-model=\"".concat(model, "\"] button[data-prod=\"").concat(prod, "\"]")).classList.add('active');
    }
  },
  updateDetails: function updateDetails(model, prod) {
    this.container.querySelector('.frame_type').innerHTML = this.products[model][prod].frame_type;
    this.container.querySelector('.lens_type').innerHTML = this.products[model][prod].lens_type;
    if (this.products[model][prod].oos === "true") {
      this.container.querySelector('.cta_container .cta').setAttribute('href', 'javascript:void(0)');
      this.container.querySelector('.cta_container .cta').classList.add('cta--oos');
      this.container.querySelector('.cta_container .cta').innerHTML = ct_SUPERNOVA.translations.common.soldOut;
    } else {
      this.container.querySelector('.cta_container .cta').setAttribute('href', checkTrad(this.productsInfo[prod].url, ct_SUPERNOVA.lang));
      this.container.querySelector('.cta_container .cta').classList.remove('cta--oos');
      this.container.querySelector('.cta_container .cta').innerHTML = ct_SUPERNOVA.translations.common.buyNow;
    }
    // this.container.querySelector('.cta_container .cta').setAttribute('aria-label',`${ checkTrad(ct_SUPERNOVA.config.buyNow,ct_SUPERNOVA.lang) + ' ' + prod} `);
  },

  sectionAnchoring: function sectionAnchoring() {
    //Section Anchoring
    var stick_el = this.container.querySelector('.scroll_wrap');
    var delta = 0;
    if (scrollManager.scrollProgress - delta < scrollManager.currentElements['styles'].top) {
      stick_el.classList.remove('fixed');
    }
    if (scrollManager.scrollProgress - delta >= scrollManager.currentElements['styles'].top && scrollManager.scrollProgress - delta <= scrollManager.currentElements['styles'].bottom + (window.ct_SUPERNOVA.device.height - stick_el.offsetHeight)) {
      if (!stick_el.classList.contains('fixed')) {
        stick_el.classList.add('fixed');
        if (stick_el.classList.contains('bottom')) {
          stick_el.classList.remove('bottom');
        }
      }
    }
    if (scrollManager.scrollProgress >= scrollManager.currentElements['styles'].bottom - stick_el.offsetHeight) {
      if (stick_el.classList.contains('fixed')) {
        stick_el.classList.remove('fixed');
        if (!stick_el.classList.contains('bottom')) {
          stick_el.classList.add('bottom');
        }
      }
    }
  }
};
var Rtr = {
  container: '',
  viewer: null,
  active: false,
  currentUpc: null,
  dragging: false,
  dragTimer: null,
  tutorialTimer: null,
  camera: false,
  analyticsSent: false,
  rendering: false,
  isInSection: false,
  firstRender: false,
  tutorialViewed: false,
  renderUsed: false,
  data: {
    selector: '#rtr',
    showEnvironment: false,
    id: {
      type: 'upc',
      value: '' // <----------
    },

    environmentPath: '',
    settings: {
      autoRotateCamera: false,
      clearColor: '#fff',
      showBackground: false,
      pixelRatio: window.devicePixelRatio,
      autoResetCamera: false,
      // <----- QUESTO DISABILITA IL RESET DELLA CAMERA AL LOADING
      cameraRotationInitial: {
        // <----- QUESTO IMPOSTA LA ROTAZIONE INIZIALE DELLA CAMERA (IN GRADI)
        phi: 0,
        // rage [-90, 90]
        theta: 0 // range [-180 - 180]
      },

      cameraRotationReset: {
        // <----- QUESTO LA TARGET ROTATION (IN GRADI)
        phi: 0,
        theta: 0
      },
      gestures: {
        mouse: {
          left: 'rotate',
          middle: 'pan',
          right: 'pan',
          wheel: 'dolly'
        },
        touches: {
          one: 'rotate',
          two: 'rotate',
          three: 'dolly-pan'
        }
      }
    }
  },
  metadata: {
    env: 'production',
    qa: false
  },
  callbacks: {},
  firstPosition: false,
  hotPositions: [[0.00, 0.00, .65],
  //front
  [.65, 0.00, 0.00],
  //side left
  [-.65, 0.00, 0.00],
  //side right
  [0.00, -.40, .50],
  //front 3/4
  [-.32, -.34, .6]],
  init: function init() {
    this.container = document.querySelector('#rtr');
    this.setElements();
    this.viewer = window.rtrViewer;
    // this.prepareFiles();
    this.viewer.init({
      data: this.data,
      metadata: this.metadata,
      callbacks: this.callbacks
    });
    window.RTR = Rtr;
  },
  setElements: function setElements() {
    var _this3 = this;
    // this.data.environmentPath= '@testAssetsPath@/panorama_red_andre.hdr',
    this.data.environmentPath = '../img/panorama_2_1.hdr',
    // this.data.environmentPath= '@testAssetsPath@/panorama_2_11.hdr',
    this.data.id.value = "827934480285";
    this.currentUpc = "827934480285";
    this.callbacks = {
      onError: function onError(_ref) {
        var code = _ref.code,
          context = _ref.context,
          error = _ref.error;
        _this3.onError(code, context, error);
      },
      onRendered: function onRendered() {
        _this3.onRendered();
      }
    };
  },
  onRendered: function onRendered() {
    // customLog(`[RTR] Redered [${this.currentUpc}]`);
    this.rendering = false;
    if (!this.firstRender) {
      this.firstRender = true;
    }
    if (this.isInSection && !this.tutorialViewed && !this.renderUsed) {
      this.setTutorial();
    }
    if (!this.camera) {
      this.camera = this.viewer.getCameraControls();
      this.camera.camera.near = 0.04;
      this.camera.camera.updateProjectionMatrix();
    }
    this.container.style.opacity = 1;
    this.camera.setPosition(-.32, -.34, .6, true);
    this.active = true;
    this.animationHandler();
    setTimeout(function () {
      // Styles.container.querySelector('.loader .icon_container').classList.remove('rotate');
    }, 600);
  },
  onError: function onError(code, context, error) {
    // customLog(`[RTR] Err  ${this.currentUpc}`,'','err')
    console.log(code, context, error);
    this.active = false;
  },
  update: function update(upc) {
    this.currentUpc = upc;
    this.container.style.opacity = 0;
    //customLog(`[RTR] Requested [${upc}]`,'','wait')
    this.rendering = true;
    this.viewer.setId({
      type: 'upc',
      value: upc
    });
  },
  inSection: function inSection() {
    // this.viewer.resetCamera();
    this.isInSection = true;
    if (this.camera) {
      this.camera.setPosition(-.32, -.34, .6, true);
    }
    if (this.firstRender) {
      // this.setTutorial();
    }

    // setTimeout(()=>{
    //   // this.viewer.setAutoRotateCamera(true);
    // },2000)
  },

  animationHandler: function animationHandler() {
    var _this4 = this;
    if (window.innerWidth > 1080) {
      this.container.addEventListener('mousedown', function (e) {
        if (!_this4.analyticsSent) {
          // Analytics.analyticsPush({
          //   'id':'Click',
          //   'Tracking_Type': 'link',
          //   'data_element_id': 'X_SupernovaSmartGlasses_RTRPlacementClp_Rotate', // max 25 characters
          //   'data_description': "Rotate",
          //   'data_analytics_available_call':"1"
          // })
          _this4.analyticsSent = true;
        }
        _this4.dragging = true;
        _this4.renderUsed = true;
        clearTimeout(_this4.dragTimer);
        Styles.container.querySelector('.rtr_container').classList.remove('tutorial_on');
        clearTimeout(_this4.tutorialTimer);
      });
      Styles.container.addEventListener('mousemove', function (e) {
        if (_this4.dragging) {}
      });
      Styles.container.addEventListener('mouseup', function (e) {
        if (_this4.dragging) {
          // this.dragTimer = setTimeout(this.setHotPosition.bind(this),1000)
          _this4.dragging = false;
        }
      });
    } else {
      this.container.addEventListener('touchstart', function (e) {
        _this4.dragging = true;
        clearTimeout(_this4.dragTimer);
        Styles.container.querySelector('.rtr_container').classList.remove('tutorial_on');
        clearTimeout(_this4.tutorialTimer);
      });
      Styles.container.addEventListener('touchmove', function (e) {
        if (_this4.dragging) {}
      });
      Styles.container.addEventListener('touchend', function (e) {
        if (_this4.dragging) {
          // this.dragTimer = setTimeout(this.setHotPosition.bind(this),1000)
          _this4.dragging = false;
        }
      });
    }
  },
  setHotPosition: function setHotPosition() {
    var currentPos = this.camera.getPosition();
    var closestPoint = getClosestPoint([currentPos.x, currentPos.y, currentPos.z], this.hotPositions);
    this.camera.setPosition(closestPoint[0], closestPoint[1], closestPoint[2], true);
    if (this.camera.getTarget().y > 0.0005) {
      this.viewer.resetCamera();
    }

    //customLog('[RTR] SET HOT POSITION','','')
  },

  isAnHotPosition: function isAnHotPosition(currentPos) {
    console.log(window.currentPos = currentPos);
    var currentPosArray = [parseFloat(currentPos.x.toFixed(2)), parseFloat(currentPos.y.toFixed(2)), parseFloat(currentPos.z.toFixed(2))];
    var foundPos = false;
    this.hotPositions.forEach(function (pos) {
      if (JSON.stringify(pos) === JSON.stringify(currentPosArray)) {
        console.log('IS AN HOT POSITION');
        foundPos = true;
      } else {}
    });
    return foundPos;
  },
  setTutorial: function setTutorial() {
    var _this5 = this;
    this.tutorialTimer = setTimeout(function () {
      if (!_this5.rendering && !_this5.tutorialViewed) {
        Styles.container.querySelector('.rtr_container').classList.add('tutorial_on');
        _this5.tutorialViewed = true;
        setTimeout(function () {
          Styles.container.querySelector('.rtr_container').classList.remove('tutorial_on');
        }, 4000);
      } else {
        _this5.setTutorial();
      }
    }, 4000);
  },
  setPosition: function setPosition(x, y, z) {
    this.camera.setPosition(x, y, z, true);
  }
  // prepareFiles:function(){
  //   getAjax(`https://rtr-viewer.luxottica.com/${Styles.defaultProd.upc}/webGL/${Styles.defaultProd.upc}_LOD0/${Styles.defaultProd.upc}.glb`,()=>{
  //     customLog('[Styles][prepareFiles] GLB model downloaded')
  //   })
  //   getAjax(`@testAssetsPath@/panorama_red4.hdr`,()=>{
  //     customLog('[Styles][prepareFiles] GLB model downloaded')
  //   })
  // }
};

var loadScript = function loadScript(url, callback) {
  var script = document.createElement("script");
  script.type = "text/javascript";
  script.className = 'rtr-viewer';
  script.src = url;
  script.addEventListener('load', function () {
    //customLog('Script RTR Loaded','','')
    callback();
  });
  document.body.appendChild(script);
};
Styles.init();
loadScript('https://rtr-viewer.luxottica.com/lib/v/4.1.0/main.js', function () {
  Rtr.init();
});
var getClosestPoint = function getClosestPoint(currentPos, posList) {
  var minDist = null;
  var minDistIndex = null;
  var currentDist = 0;
  posList.forEach(function (pos, i) {
    currentDist = Math.pow(currentPos[0] - pos[0], 2) + Math.pow(currentPos[1] - pos[1], 2) + Math.pow(currentPos[2] - pos[2], 2);
    if (!minDist || currentDist < minDist) {
      minDist = currentDist;
      minDistIndex = i;
    }
  });
  return posList[minDistIndex];
};
document.addEventListener('DOMContentLoaded', function () {
  document.querySelectorAll('#details button').forEach(function (button) {
    button.addEventListener('click', function () {
      Rtr.setPosition(button.dataset.x, button.dataset.y, button.dataset.z);
    });
  });
});

},{}]},{},[1]);
